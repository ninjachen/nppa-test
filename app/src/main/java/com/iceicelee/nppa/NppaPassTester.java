/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.iceicelee.nppa;

import com.iceicelee.nppa.connect.HttpConnector;
import com.iceicelee.nppa.constants.TestUrlConstants.ReqHttpMethod;
import com.iceicelee.nppa.sign.SignService;
import com.iceicelee.nppa.utils.EncryptUtils;
import com.iceicelee.nppa.utils.TestUrlProvider;
import net.sf.json.JSONObject;
import org.apache.commons.lang3.StringUtils;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

/**
 * 中宣部的网络游戏防沉迷实名认证系统 接口测试</p>
 * 想提供一个工具 把其中的测试都通过，省的来来回回的测接口
 *
 * @author Yao Shuai
 * @date: 2021/3/26 19:12
 */
public class NppaPassTester {

    private TestUrlProvider urlProvider;

    private HttpConnector httpConnector;

    private SignService signService;

    public NppaPassTester() {
        this.urlProvider = new TestUrlProvider();
        this.httpConnector = new HttpConnector();
        this.signService = new SignService();
    }

    public static void main(String[] args) {
        Global global = new Global();
        NppaPassTester tester = new NppaPassTester();
        try {
            tester.begin();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void begin() throws Exception {
        System.out.println("选1-8");
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String testCode = null;
        int testNum = 0;
        testNum = Integer.parseInt(reader.readLine());
        System.out.println("test code > ");
        testCode = reader.readLine();
        if (testNum > 0 && testNum < 9) {
            if (StringUtils.isEmpty(testCode)) {
                throw new IllegalArgumentException("测试码格式不正确!");
            }
        }
        switch (testNum) {
            case 1:
                try {
                    testcase01(testCode);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            case 2:

                break;
            case 3:

                break;
            case 4:

                break;
            case 5:

                break;
            case 6:

                break;
            case 7:

                break;
            case 8:

                break;
        }
    }

    /**
     * {"ai":"100000000000000008",
     * "name":"
     * 某一八
     * "idNum":"110000190101040016"}
     * 实名认证结果返回“认证中”：
     * 编号 预置 数据
     * 1
     * {"ai":"
     *
     * @param testCode
     */
    private void testcase01(String testCode) throws Exception {
        String urlStr = this.urlProvider.getTestUrl(1, testCode);
        ReqHttpMethod method = this.urlProvider.getTestUrlMethod(1);
        Map<String, String> reqPropertyMap = new HashMap<>(Global.getConfig().getAppIdAndBizIdMap());
        reqPropertyMap.put("timestamps", System.currentTimeMillis() + "");

        String ai = "100000000000000008";
        String name = "某一八";
        String idNum = "110000190101040016";

        JSONObject jo = new JSONObject();
        jo.put("ai", ai);
        jo.put("name", name);
        jo.put("idNum", idNum);
        String dataStr = jo.toString();

        String dataContent = EncryptUtils.aesGcmEncrypt(dataStr,
                EncryptUtils.hexStringToByte(Global.getConfig().getSecretKey()));
        JSONObject dataJson = new JSONObject();
        dataJson.put("data", dataContent);
        String postData = dataJson.toString();

        String sign = this.signService.sign(reqPropertyMap, null, postData);
        if (sign == null) {
            //lgo
            return;
        }
        reqPropertyMap.put("sign", sign);
        httpConnector.send(urlStr, method, reqPropertyMap, null, postData);
    }

    public TestUrlProvider getUrlProvider() {
        return urlProvider;
    }

    public void setUrlProvider(TestUrlProvider urlProvider) {
        this.urlProvider = urlProvider;
    }

}
